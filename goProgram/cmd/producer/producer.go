package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/IBM/sarama"
	"github.com/gin-gonic/gin"
	models "kafka-notify/pkg"
	"log"
	"net/http"
	"strconv"
)

const (
	// Broker is the Kafka broker address
	ProducerPort       = ":8080"
	KafkaServerAddress = "localhost:9092"
	kafkaTopic         = "notifications"
)

// =============HELPER FUNCTIONS==============

var ErrUserNotFoundInProducer = errors.New("user not found in producer")

func findUserById(id int, users []models.User) (models.User, error) {
	for _, user := range users {
		if user.ID == id {
			return user, nil
		}
	}
	return models.User{}, ErrUserNotFoundInProducer
}

func getIdFromRequest(formValue string, ctx *gin.Context) (int, error) {
	id, err := strconv.Atoi(ctx.PostForm(formValue)) //Convert string to int ASCII to Int, ki·ªÉu string ph·∫£i l√† s·ªë
	if err != nil {
		return 0, fmt.Errorf("Fail to parse ID from value %s: %w", formValue, err)
	}
	return id, nil
}

// ============== KAFKA RELATED FUNCTIONS ==============
// * sarama.SyncProducer l√† g·ª≠i message ƒë·ªìng b·ªô, ph·∫£i ch·ªù x√°c nh·∫≠n t·ª´ Kafka server th√¨ m·ªõi th·ª±c hi·ªán t√°c v·ª• kh√°c
// ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ghi th√†nh c√¥ng, t√≠nh nh·∫•t qu√°n v√† an to√†n d·ªØ li·ªáu
func sendKafkaMessage(producer sarama.SyncProducer,
	users []models.User, ctx *gin.Context, fromID, toID int) error {
	message := ctx.PostForm("message")
	fromUser, err := findUserById(fromID, users)
	if err != nil {
		return err
	}

	toUser, err := findUserById(toID, users)
	if err != nil {
		return err
	}

	notification := models.Notification{
		From:    fromUser,
		To:      toUser,
		Message: message,
	}

	//parse to Json, ng∆∞·ª£c l·∫°i l√† unMarshal
	notificationJSON, err := json.Marshal(notification)
	if err != nil {
		return fmt.Errorf("Failed to marshal notification: %w", err) //wrapping error ƒë·ªÖ d·ªÖ d√†ng ƒë·ªçc l·ªói v√† ki·ªÉm so√°t
	}

	//S·ª≠ d·ª•ng &sarama.ProducerMessage l√† ƒë·ªÉ t·∫°o msg c√≥ ki·ªÉu l√† bi·∫øn con tr·ªè
	// m·ª•c ƒë√≠ch sau khi t·∫°o ra n√≥, th√¨ c√≥ th·ªÉ thao t√°c thay ƒë·ªïi gi√° tr·ªã tr·ª±c ti·∫øp c·ªßa n√≥, n·∫øu kh√¥ng d√πng pointer th√¨ ko thay ƒë·ªïi ƒë∆∞·ª£c
	//EXAMPLE:
	//msg.Topic = "NewTopic"
	//msg.Key = sarama.StringEncoder("NewKey")
	//msg.Value = sarama.StringEncoder("NewValue")
	msg := &sarama.ProducerMessage{
		Topic: kafkaTopic,
		Key:   sarama.StringEncoder(strconv.Itoa(toUser.ID)), //Convert int to string  int to ASCII
		Value: sarama.StringEncoder(notificationJSON),        //StringEncoder l√† ƒë·ªÉ parse sang ki·ªÉu d·ªØ li·ªáu c√≥ th·ªÉ g·ª≠i cho Kafka
	}
	// return 3 value: partition, offset, error
	/*
		partition: s·ªë partition c·ªßa topic m√† th√¥ng ƒëi·ªáp ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn. M·ªói topic c√≥ th·ªÉ ƒë∆∞·ª£c chia th√†nh nhi·ªÅu partition ƒë·ªÉ ph√¢n t√°n d·ªØ li·ªáu.
		offset: v·ªã tr√≠ c·ªßa partition
	*/
	_, _, err = producer.SendMessage(msg)
	return err
}

func sendMessageHandler(producer sarama.SyncProducer, users []models.User) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		fromID, err := getIdFromRequest("fromID", ctx)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, gin.H{"message": err.Error()})
			return
		}

		toID, err := getIdFromRequest("toID", ctx)
		if err != nil {
			ctx.JSON(http.StatusBadRequest, gin.H{"message": err.Error()})
			return
		}

		err = sendKafkaMessage(producer, users, ctx, fromID, toID)
		if errors.Is(err, ErrUserNotFoundInProducer) {
			ctx.JSON(http.StatusInternalServerError, gin.H{
				"message": err.Error(),
			})
			return
		}
		ctx.JSON(http.StatusOK, gin.H{
			"message": "Notification sent successfully!",
		})
	}
}

/*
Vi·ªác c·∫•u h√¨nh Return.Successes l√† m·ªôt ph·∫ßn quan tr·ªçng trong qu√° tr√¨nh x√°c nh·∫≠n v√† ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n khi g·ª≠i th√¥ng ƒëi·ªáp ƒë·∫øn Kafka.
N·∫øu kh√¥ng b·∫≠t t√πy ch·ªçn n√†y, b·∫°n s·∫Ω kh√¥ng bi·∫øt ƒë∆∞·ª£c th√¥ng ƒëi·ªáp ƒë√£ g·ª≠i th√†nh c√¥ng hay kh√¥ng,
v√† d·ªØ li·ªáu c√≥ th·ªÉ b·ªã m·∫•t ho·∫∑c kh√¥ng nh·∫•t qu√°n trong tr∆∞·ªùng h·ª£p l·ªói.
*/
//config.Producer.Flush n·∫øu mu·ªën c·∫•u h√¨nh
func setupProducer() (sarama.SyncProducer, error) {
	config := sarama.NewConfig()
	config.Producer.Return.Successes = true
	producer, err := sarama.NewSyncProducer([]string{KafkaServerAddress},
		config)
	if err != nil {
		return nil, fmt.Errorf("failed to setup producer: %w", err)
	}
	return producer, nil
}

func main() {
	users := []models.User{
		{ID: 1, Name: "Emma"},
		{ID: 2, Name: "Bruno"},
		{ID: 3, Name: "Rick"},
		{ID: 4, Name: "Lena"},
	}

	producer, err := setupProducer()
	if err != nil {
		log.Fatalf("failed to initialize producer: %v", err)
	}
	defer producer.Close()
	//s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫£m b·∫£o h√†m Close ƒë∆∞·ª£c g·ªçi khi scope n√†y ƒë∆∞·ª£c th·ª±c thi xong,
	//v√† s·∫Ω ƒë√≥ng ƒë√∫ng c√°ch

	gin.SetMode(gin.ReleaseMode)
	router := gin.Default()
	router.POST("/send", sendMessageHandler(producer, users))

	fmt.Printf("Kafka PRODUCER üì® started at http://localhost%s\n",
		ProducerPort)

	if err := router.Run(ProducerPort); err != nil {
		log.Printf("failed to run the server: %v", err)
	}
}
